{
  "object_id": "https://biocomputeobject.org/BCO_000501/1.1",
  "spec_version": "https://w3id.org/ieee/ieee-2791-schema/2791object.json",
  "etag": "",
  "provenance_domain": {
    "name": "",
    "version": "1.0",
    "license": "",
    "created": "",
    "modified": "",
    "contributors": [
      {
        "name": "Your contact here",
        "affiliation": "Great University",
        "email": "example_email@great-uni.edu",
        "contribution": [
          "createdBy"
        ]
      }
    ]
  },
  "usability_domain": [
    "Describe things here",
    "List form is acceptable for readability"
  ],
  "description_domain": {
    "keywords": [
      "PredictMod Examples",
      "machine learning",
      "mlp"
    ],
    "pipeline_steps": [
      {
        "step_number": 1,
        "name": "example_classifier.py",
        "description": "The classifier creates an example classifier",
        "version": "1.0",
        "input_list": [
          {
            "filename": "example_input.csv",
            "uri": "<link here>"
          }
        ],
        "output_list": [
          {
            "filename": "example_1_classifier.pkl",
            "uri": ""
          }
        ],
        "prerequisite": [
          {
            "name": "example_1_classifier.py",
            "uri": {
              "uri": ""
            }
          }
        ]
      },
      {
        "step_number": 2,
        "name": "example_1_predict.py",
        "description": "The predictor code expects an example classifier for loading.",
        "version": "1.0",
        "prerequisite": [
          {
            "name": "ccrcc_predict.py",
            "uri": {
              "uri": "https://github.com/GW-HIVE/PredictMod/blob/main/flask_backend/models/"
            }
          }
        ],
        "input_list": [
          {
            "filename": "ccrcc_classifier.pkl",
            "uri": "https://github.com/GW-HIVE/PredictMod/blob/main/flask_backend/models/"
          },
          {
            "filename": "example_1_input.csv",
            "uri": "https://github.com/GW-HIVE/PredictMod/blob/main/flask_backend/models/"
          }
        ],
        "output_list": [
          {
            "filename": "tmpfs",
            "uri": "file:///dev/tmpfs"
          }
        ]
      }
    ]
  },
  "io_domain": {
    "input_subdomain": [
      {
        "uri": {
          "uri": "https://github.com/GW-HIVE/PredictMod/blob/main/flask_backend/models/",
          "filename": "example_1_sample.tsv"
        }
      }
    ],
    "output_subdomain": [
      {
        "mediatype": "tmpfs",
        "uri": {
          "uri": "file:///dev/tmpfs"
        }
      }
    ]
  },
  "execution_domain": {
    "script": [
      {
        "uri": {
          "filename": "example_1_classifier.py",
          "uri": "https://github.com/GW-HIVE/PredictMod/blob/main/flask_backend/models/"
        }
      },
      {
        "uri": {
          "filename": "example_1_predict.py",
          "uri": "https://github.com/GW-HIVE/PredictMod/blob/main/flask_backend/models/"
        }
      }
    ],
    "script_driver": "manual",
    "software_prerequisites": [
      {
        "name": "python",
        "version": "3.11.5",
        "uri": {
          "uri": "https://www.python.org/downloads/release/python-3115/"
        }
      },
      {
        "name": "pandas",
        "version": "2.1.4",
        "uri": {
          "uri": "https://pandas.pydata.org/pandas-docs/version/2.1.4/"
        }
      },
      {
        "name": "scikit-learn",
        "version": "1.3.2",
        "uri": {
          "uri": "https://scikit-learn.org/stable/whats_new/v1.3.html"
        }
      },
      {
        "name": "xgboost",
        "version": "2.0.3",
        "uri": {
          "uri": "https://xgboost.readthedocs.io/en/release_2.0.0/"
        }
      },
      {
        "name": "numpy",
        "version": "1.26.3",
        "uri": {
          "uri": "https://numpy.org/devdocs/release/1.26.3-notes.html"
        }
      }
    ],
    "external_data_endpoints": [],
    "environment_variables": {}
  },
  "error_domain": {
    "empirical_error": {
      "empirical_error": "0"
    },
    "algorithmic_error": {
      "algorithmic_error": "0"
    }
  }
}