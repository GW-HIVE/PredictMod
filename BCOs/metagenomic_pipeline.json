{
  "object_id": "https://biocomputeobject.org/BCO_000405/DRAFT",
  "spec_version": "https://w3id.org/ieee/ieee-2791-schema/2791object.json",
  "etag": "feabf6b26ffe86867dded17262cdfc8eb0a14636",
  "provenance_domain": {
    "name": "metagenomic_pipeline",
    "version": "1.0",
    "license": "https://creativecommons.org/licenses/by-sa/4.0/",
    "created": "2023-12-05T16:49:17",
    "modified": "2023-12-05T17:08:49",
    "derived_from": [],
    "contributors": [
      {
        "name": "Urnisha Bhuiyan",
        "affiliation": "GW HIVE Lab ",
        "email": "sbhuiyan28@gwu.edu",
        "contribution": [
          "authoredBy"
        ],
        "orcid": ""
      }
    ],
    "review": [
      {
        "status": "approved",
        "reviewer_comment": "I ran the data and got very similar results.  This looks great Urnisha.  These results are far more in line with the paper you sent and it appears that there is definitely a signal here.  Now that we have evidence that there is a signal, I would work to better characterize it.  Look at the partial dependency plots of the important predictors.  Does this inspire some sort of idea about the underlying biological mechanisms?  Look at the shapley values for each patient.  Why are these models predicting response or no response for each patient?  Can you build models of comparable accuracy with fewer predictors through either feature importance or PCA.  Let these initial (mostly empirical results) guide you toward recommending a more directed experiment or hypothesizing or what might be the underlying causal diagram about how these organisms are interacting to cause patients to respond or not respond.",
        "date": "2022-11-01T12:26:00.000Z",
        "reviewer": {
          "name": "John David",
          "affiliation": "VMI",
          "email": "sbhuiyan28@email.gwu.edu",
          "contribution": [
            "curatedBy"
          ],
          "orcid": ""
        }
      },
      {
        "status": "approved",
        "reviewer_comment": "I agree with John. I would particularly emphasize the Shapley values because it assigns payouts (relative value) to the players (the features), giving a sense of how much each feature contributes to the overall prediction. The idea comes from coalitional game theory. John, am I interpreting this correctly for ml? I think if we get something biologically meaningful by combining pdp’s with shapley values this could be a cool proof of concept paper on how these two ml tools can be used to make sense.",
        "date": "2022-11-01T14:21:00.000Z",
        "reviewer": {
          "name": "Atin Basuchoudhary",
          "affiliation": "VMI",
          "email": "BasuChoudharyA@vmi.edu",
          "contribution": [
            "curatedBy"
          ],
          "orcid": ""
        }
      }
    ]
  },
  "usability_domain": [
    "The PredictMod team leveraged publicly available metagenomic whole-genome sequencing (WGS) reads stored within the National Center for Biotechnology Information’s (NCBI) Sequence Read Archive (SRA). These reads were submitted by authors of a publication interested in identifying alterations within gut microbiome profiles of medication-naïve prediabetes male volunteers. The volunteers of this study were separated into a sedentary and an exercise group, where the exercise group underwent a 12-week high-intensity exercise regimen. The authors observed a varied response to the intervention within their experimental group, with some individuals experiencing a favorable outcome (a 2-fold or greater reduction in Homeostatic Model Assessment for Insulin Resistance [HOMA-IR]) while others showed little to no improvement in HOMA-IR. Those who were able to improve their HOMA-IR were deemed responders in this study, while those who were unable to improve their condition were deemed non-responders [PMID: 31786155]. The PredictMod team utilized the archived sequences (SRA accession: PRJNA454826) to conduct metagenomic analysis and generate a master table consisting of relative bacterial abundances per sample through resources such as the High-performance Integrated Virtual Environment (HIVE) and Python v3.9.5. The metagenomic workflow for this project is provided in Figure 3. The original microbiome table consisted of 20 responders and 10 non-responders. Given the dataset was slightly unbalanced, the minority class was up-sampled to increase the signal within the non-responders. By up-sampling the minority class, there was an even distribution of 20 responders and 20 non-responders. Alternative methods that may be used in the future could include synthetic patient generation or utilization of additional archived sequences. "
  ],
  "description_domain": {
    "pipeline_steps": [
      {
        "step_number": "1",
        "name": " HIVE",
        "description": "All sequences stored within SRA were uploaded into the HIVE2 platform via the external downloader. Each sequence's AWS link was copied and pasted into the URL input box and uploaded into HIVE2 one at a time. ",
        "version": "v2.0",
        "input_list": []
      },
      {
        "step_number": "2",
        "name": "MultipleQC",
        "description": "Once all sequences were successfully uploaded, they were run using MultipleQC in the HIVE2 platform to check the overall quality score of each sample. ",
        "version": ""
      },
      {
        "step_number": "3",
        "name": "Hexagon",
        "description": "Then each sequence was run against the Human Reference genome (objectID: 1416) to determine whether certain segments of the reads aligned with the human genome. This is an additional quality control step conducted to ensure no host genome was attached to the sample sequence reads. Once alignment was successful with each sequence, the unaligned segments were archived to save only the bacterial sequences into a separate folder labeled \"Hexagon Runs\" in HIVE2. ",
        "version": ""
      },
      {
        "step_number": "4",
        "name": "CensuScope",
        "description": "The archived sequences were then run against the NCBI-NT-20200203 reference list of microbial genomes to perform taxonomic profiling. This is a crucial step in understanding the types of organisms that are present within the samples and provides the basis for quality control and curation of additional bacterial genomes not currently present within the GutFeeling KnowledgeBase v4.0. ",
        "version": ""
      },
      {
        "step_number": "5",
        "name": "Python ",
        "description": "Once all sequences were profiled, the hit list was downloaded to a local machine to generate a text file that consists of the RefSeq accessions of each bacteria found per sample. These files were then stored in a folder labeled \"CensuScope Hits\" and ran against a Python script that creates a text file that isolates all unique accessions found among all samples. This aided in consolidating unique accessions to generate a list of reference genomes that will be thoroughly checked for exclusion criteria. ",
        "version": "v3.9.5"
      },
      {
        "step_number": "6",
        "name": "NCBI RefSeq",
        "description": "The list of unique accessions was then manually examined to ensure the sequences were of bacterial origin, complete sequences, non-repetitive to organisms documented in GFKB v4.0, void of plasmid, void of transposable regions, and contain an associated reference proteome. ",
        "version": "Release 221"
      },
      {
        "step_number": "7",
        "name": "Hexagon",
        "description": "Once a curated list containing all bacterial reference genomes was curated, each sequence was uploaded into HIVE2 via the genome upload by their RefSeq accession. These reads were then aggregated into a single HIVE object that will be used for the final Hexagon step. In this step, the sample reads were run against the newly curated reference genome object to identify the percent composition of each organism per sample. ",
        "version": ""
      },
      {
        "step_number": "8",
        "name": "Python",
        "description": "Once each sample had been aligned to the curated reference genomes object, the hit list of each sample was downloaded to a local machine and uploaded into Visual Studio Code v.1.63.2 to determine absolute and relative abundance per sample. Then all samples were aggregated into a single master table that comprised of patients (columns) and bacteria (rows) where each patient's total abundance equaled around 1.0 (or 100 percent). ",
        "version": "v3.9.5"
      },
      {
        "step_number": "9",
        "name": "Excel",
        "description": "A final curation step was conducted with the master table to ensure organisms that belong to similar proteome clusters were aggregated. This was performed to heighten any signals that may exist from these organisms sharing genetic and proteomic similarities. ",
        "version": ""
      },
      {
        "step_number": "10",
        "name": "MATLAB",
        "description": "The cleaned and aggregated table was then uploaded into MATLAB for machine learning analysis. The Classification Learner Application was leveraged to run each pre-set algorithm against the master table data to identify the best-performing models. ",
        "version": "vR2022a"
      },
      {
        "step_number": "11",
        "name": "Scikit Learn ",
        "description": "Once those models had been isolated, manual model optimization was conducted in Python using the Scikit Learn package. The models used were decision tree classifiers, random forest classifiers, and support vector machines. ",
        "version": "v1.3.2"
      },
      {
        "step_number": "12",
        "name": "GitHub",
        "description": "After model optimization, the metagenomic model was uploaded to the PredictMod GitHub repository to be integrated into the PredictMod server. ",
        "version": "v3.11.0"
      }
    ]
  },
  "parametric_domain": [
    {
      "step": "3",
      "param": "Reference Genome",
      "value": "1416"
    },
    {
      "step": "3",
      "param": "Minimum Match Length",
      "value": "130"
    },
    {
      "step": "3",
      "param": "Minimum Match Unit",
      "value": "Bases"
    },
    {
      "step": "3",
      "param": "Matches to Keep",
      "value": "All equally best alternative matches"
    },
    {
      "step": "3",
      "param": "Mismatches - Computed on",
      "value": "Alignment Length "
    },
    {
      "step": "3",
      "param": "Matches to Keep",
      "value": "All equally best alternative matches"
    },
    {
      "step": "3",
      "param": "Priority of Submission",
      "value": "Polite Submission "
    },
    {
      "step": "3",
      "param": "Parameter List Parameter",
      "value": "Sequence Read"
    },
    {
      "step": "3",
      "param": "Parameter List Read Value",
      "value": "2"
    },
    {
      "step": "3",
      "param": "Batch Service",
      "value": "Batch Mode"
    },
    {
      "step": "3",
      "param": "Alignment Parameters >> Seed k-mer",
      "value": "14 letter "
    },
    {
      "step": "3",
      "param": "Maximum Number of Hits per Read to Consider",
      "value": "10"
    },
    {
      "step": "3",
      "param": "Resolve Conflicts >> Conflict resolution method",
      "value": "Markovnikov Rule "
    },
    {
      "step": "3",
      "param": "Resolve Conflicts >> Score for conflict resolution",
      "value": "Number of Reads"
    },
    {
      "step": "3",
      "param": "Use uniquely align reads only",
      "value": "Yes"
    },
    {
      "step": "4",
      "param": "Algorithm ",
      "value": "BLAST"
    },
    {
      "step": "4",
      "param": "Database",
      "value": "Object ID: 11656 / NCBI-NT-20200203"
    },
    {
      "step": "4",
      "param": "Number of Reads",
      "value": "2500"
    },
    {
      "step": "4",
      "param": "Number of Alignments p/Iteration",
      "value": "1"
    },
    {
      "step": "4",
      "param": "Maximum Number of Iterations",
      "value": "5"
    },
    {
      "step": "4",
      "param": "Taxonomic Level",
      "value": "leaf"
    },
    {
      "step": "4",
      "param": "Filter Low Quality Reads",
      "value": "Yes"
    },
    {
      "step": "4",
      "param": "Active Machine Learning (Shannon Entropy)",
      "value": "UNCHECK box"
    },
    {
      "step": "4",
      "param": "Priority Submission",
      "value": "Polite Submission"
    },
    {
      "step": "4",
      "param": "Parameter List Parameter",
      "value": "Input Sequences"
    },
    {
      "step": "4",
      "param": "Parameter List Value",
      "value": "2"
    },
    {
      "step": "4",
      "param": "Batch Service",
      "value": "Batch Mode"
    },
    {
      "step": "4",
      "param": "Keep and store alignments",
      "value": "CHECK box"
    },
    {
      "step": "7",
      "param": "Reference Genome ",
      "value": "objectID 49923: Full VA PreDM Reference Genome"
    },
    {
      "step": "7",
      "param": "Minimum Match Length",
      "value": "130"
    },
    {
      "step": "7",
      "param": "Minimum Match Unit",
      "value": "Bases "
    },
    {
      "step": "7",
      "param": "Matches to Keep",
      "value": "All equally best alternative matches"
    },
    {
      "step": "7",
      "param": "Mismatches - Percent Allowed",
      "value": "10"
    },
    {
      "step": "7",
      "param": "Mismatches - Computed on",
      "value": "Alignment Length "
    },
    {
      "step": "7",
      "param": "Priority of Submission",
      "value": "Polite Submission"
    },
    {
      "step": "7",
      "param": "Parameter List - Parameter",
      "value": "Sequence Read"
    },
    {
      "step": "7",
      "param": "Parameter List - Value",
      "value": "1"
    },
    {
      "step": "7",
      "param": "Batch Service",
      "value": "Batch Mode"
    },
    {
      "step": "7",
      "param": "Alignment Parameters >> Seed k-mer",
      "value": "14 letter"
    },
    {
      "step": "7",
      "param": "Maximum Number of Hits per Read to Consider",
      "value": "10"
    },
    {
      "step": "7",
      "param": "Resolve Conflicts >> Conflict resolution method",
      "value": "Markovnikov Rule"
    },
    {
      "step": "7",
      "param": "Resolve Conflicts >> Use uniquely align reads only",
      "value": "CHECK box "
    },
    {
      "step": "10",
      "param": "Response",
      "value": "From dataset variable"
    },
    {
      "step": "10",
      "param": "Validation ",
      "value": "Cross-Validation "
    },
    {
      "step": "10",
      "param": "Cross Validation Folds",
      "value": "5"
    },
    {
      "step": "11",
      "param": "test_size",
      "value": "0.25"
    },
    {
      "step": "11",
      "param": "random_state",
      "value": "123"
    }
  ],
  "io_domain": {},
  "execution_domain": {
    "script": [
      {
        "filename": "",
        "uri": {
          "filename": "accession_list_curator1.0.py",
          "uri": "https://github.com/GW-HIVE/microbiome/blob/master/Accession%20List/accession_list_curator1.0.py"
        },
        "access_time": "",
        "sha1_checksum": ""
      },
      {
        "filename": "",
        "uri": {
          "filename": "CensuScope_code1.3.py",
          "uri": "https://github.com/GW-HIVE/microbiome/blob/master/Accession%20List/CensuScope_code1.3.py"
        },
        "access_time": "",
        "sha1_checksum": ""
      },
      {
        "filename": "",
        "uri": {
          "filename": "MG_ML.py",
          "uri": "https://github.com/GW-HIVE/PredictMod/blob/main/MG_python/MG_ML.py"
        },
        "access_time": "",
        "sha1_checksum": ""
      },
      {
        "filename": "",
        "uri": {
          "filename": "abundance_merge.py",
          "uri": "https://github.com/ubhuiyan/researchprojects/blob/main/abundance_merge.py"
        },
        "access_time": "",
        "sha1_checksum": ""
      }
    ],
    "script_driver": "",
    "software_prerequisites": [],
    "external_data_endpoints": [],
    "environment_variables": {}
  },
  "extension_domain": [],
  "error_domain": {}
}